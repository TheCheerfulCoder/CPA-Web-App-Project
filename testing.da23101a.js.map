{"version":3,"sources":["testPages/testing.js"],"names":["window","addEventListener","event","console","log","question","document","getElementById","choices","Array","from","getElementsByClassName","progressText","showAnswerButton","nextQuestionButton","availableQuestions","acceptingAnswers","MAX_QUESTIONS","parseInt","localStorage","getItem","testScores","showAnswer","correctChoice","String","currentQuestion","answer","classList","add","explanationElement","innerText","style","visibility","fetch","then","res","json","loadedQuestions","questions","startTest","catch","err","error","questionCounter","scoreList","getNewQuestion","doNothing","forEach","answerStylingIncorrect","remove","answerStylingCorrect","answerStylingRevealed","answerStylingSelected","innerHTML","questionIndex","Math","floor","random","length","onclick","toggle","choice","number","dataset","setItem","explanation","splice","parentElement","e","buttonText","location","href","selectedChoice","target","classToApply","tagName","missedQuestionsDeserialized","JSON","parse","push","questionID","stringify","toString","testScoresDeserialized","testScoresKeys","Object","keys","lastKey","pop","lastTestNumber","replace","currentTestNumber","testScoresSerialized","modal","backDrop","revealModalButton","toggleModal"],"mappings":"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","file":"testing.da23101a.js","sourceRoot":"..\\src\\app","sourcesContent":["/* If the current URL includes \"index.html\", then user has pressed the back\r\nbutton after completing the quiz, so reload the home page. */\r\n// console.log(window.location.href.includes('index.html'));\r\n\r\nwindow.addEventListener('popstate', event => {\r\n  console.log('The popstate event occured in testing.js!');\r\n});\r\n\r\n// if (window.location.href.includes('index.html')) {\r\n//   window.location.reload('/CPA-Web-App-Project/index.html');\r\n// }\r\n\r\nconst question = document.getElementById('question');\r\nconst choices = Array.from(document.getElementsByClassName('choice-text'));\r\nconst progressText = document.getElementById('progressText');\r\n\r\nconst showAnswerButton = document.getElementById('show-answer');\r\nconst nextQuestionButton = document.getElementById('next-question');\r\n\r\nlet availableQuestions = [];\r\nlet acceptingAnswers = true;\r\n\r\nconst MAX_QUESTIONS = parseInt(localStorage.getItem('testLength'));\r\n\r\n// Initialize or fetch the \"testScores\" object that holds all test score data\r\nlet testScores = {};\r\n\r\n// Fetch the questions from the \"/assets/questions.json\" file and store them in \"questions\"\r\nfetch('../questions.json')\r\n  .then((res) => {\r\n    return res.json();\r\n  })\r\n\r\n  .then((loadedQuestions) => {\r\n    questions = loadedQuestions;\r\n    startTest();\r\n  })\r\n\r\n  .catch((err) => {\r\n    console.error(err);\r\n  });\r\nstartTest = () => {\r\n  questionCounter = 0;\r\n  availableQuestions = [...questions];\r\n  scoreList = [];\r\n  getNewQuestion();\r\n};\r\n\r\ndoNothing = () => {\r\n  return;\r\n};\r\n\r\ngetNewQuestion = () => {\r\n  // Remove any green/red styling from the previous question's answer\r\n  const answerStylingIncorrect = [\r\n    ...document.getElementsByClassName('incorrect'),\r\n  ];\r\n\r\n  answerStylingIncorrect.forEach((answerStylingIncorrect) => {\r\n    answerStylingIncorrect.classList.remove('incorrect');\r\n  });\r\n\r\n  const answerStylingCorrect = [...document.getElementsByClassName('correct')];\r\n\r\n  answerStylingCorrect.forEach((answerStylingCorrect) => {\r\n    answerStylingCorrect.classList.remove('correct');\r\n  });\r\n\r\n  const answerStylingRevealed = [\r\n    ...document.getElementsByClassName('button-revealed'),\r\n  ];\r\n\r\n  answerStylingRevealed.forEach((answerStylingRevealed) => {\r\n    answerStylingRevealed.classList.remove('button-revealed');\r\n  });\r\n\r\n  const answerStylingSelected = [\r\n    ...document.getElementsByClassName('button-selected'),\r\n  ];\r\n\r\n  answerStylingSelected.forEach((answerStylingSelected) => {\r\n    answerStylingSelected.classList.remove('button-selected');\r\n  });\r\n\r\n  // Hide any explanation stylings from the previous question.\r\n  explanationElement = document.getElementById('explanation');\r\n  explanationElement.innerText = '';\r\n\r\n  // Update the question counter (e.g. 1/3 --> 2/3)\r\n  questionCounter++;\r\n  progressText.innerHTML = `Question:\\u00A0 ${questionCounter}/${MAX_QUESTIONS}`;\r\n\r\n  // Fill in the question\r\n  const questionIndex = Math.floor(Math.random() * availableQuestions.length);\r\n  currentQuestion = availableQuestions[questionIndex];\r\n  question.innerText = currentQuestion.question;\r\n\r\n  // Disable the next question button.\r\n  nextQuestionButton.onclick = doNothing;\r\n  nextQuestionButton.classList.toggle('button');\r\n  nextQuestionButton.classList.toggle('button-disabled');\r\n\r\n  /* When on the last question, change the \"NEXT QUESTION\" button to a \r\n       \"VIEW PERFORMANCE\" performance button. */\r\n  if (questionCounter === MAX_QUESTIONS) {\r\n    // Change the button's text\r\n    var element = document.getElementById('next-question-text');\r\n    element.innerHTML = 'View Score';\r\n  }\r\n\r\n  // Fill in the answer options\r\n  choices.forEach((choice) => {\r\n    const number = choice.dataset['number'];\r\n    choice.innerText = currentQuestion['choice' + number];\r\n  });\r\n\r\n  // // Fill in the explanation\r\n  // explanation.innerText = currentQuestion.explanation;\r\n\r\n  // Send question explanation to local storage for later access in the \"ShowAnswer\"\r\n  // function.\r\n  localStorage.setItem('questionExplanation', currentQuestion.explanation);\r\n\r\n  // Remove the question from the list of available questions\r\n  availableQuestions.splice(questionIndex, 1);\r\n\r\n  // Allow the user to select answers\r\n  acceptingAnswers = true;\r\n};\r\n\r\nchoices.forEach((choice) => {\r\n  choice.parentElement.addEventListener('click', (e) => {\r\n    // Prevent the user from selecting more than one answer\r\n    if (!acceptingAnswers) return;\r\n    acceptingAnswers = false;\r\n\r\n    // Enable the next question button unless we are on the last question.\r\n    buttonText = document.getElementById('next-question-text').innerHTML;\r\n    if (buttonText === 'View Score') {\r\n      nextQuestionButton.classList.toggle('button');\r\n      nextQuestionButton.classList.toggle('button-disabled');\r\n      const viewMyPerformance = document.getElementById('next-question');\r\n      viewMyPerformance.onclick = function RedirectToPerformance() {\r\n        // history.replaceState({}, '', '/CPA-Web-App-Project/index.html');\r\n        window.location.href = '/CPA-Web-App-Project/dashboard/dashboard.html';\r\n      };\r\n    } else {\r\n      nextQuestionButton.onclick = getNewQuestion;\r\n      nextQuestionButton.classList.toggle('button');\r\n      nextQuestionButton.classList.toggle('button-disabled');\r\n    }\r\n\r\n    // Get the data for the selected answer\r\n    const selectedChoice = e.target;\r\n    const selectedAnswer = selectedChoice.dataset['number'];\r\n\r\n    /* By default, make the user's selection incorrect; however, if the user\r\n           selected the correct answer, make the user's selection correct. */\r\n    let classToApply = 'incorrect';\r\n    if (selectedAnswer == currentQuestion.answer) {\r\n      classToApply = 'correct';\r\n    }\r\n\r\n    // Change the class element in the HTML for the parent element\r\n    if (e.target.tagName == 'P') {\r\n      selectedChoice.parentElement.classList.add(\r\n        classToApply,\r\n        'button-selected'\r\n      );\r\n    } else {\r\n      selectedChoice.classList.add(classToApply, 'button-selected');\r\n    }\r\n\r\n    // Store whether the user got the question right or wrong in local storage\r\n    if (classToApply === 'incorrect') {\r\n      if (localStorage.getItem('missedQuestions') !== null) {\r\n        let missedQuestionsDeserialized = JSON.parse(\r\n          localStorage.getItem('missedQuestions')\r\n        );\r\n        missedQuestionsDeserialized.push(currentQuestion.questionID);\r\n        localStorage.setItem(\r\n          'missedQuestions',\r\n          JSON.stringify(missedQuestionsDeserialized)\r\n        );\r\n      } else {\r\n        localStorage.setItem(\r\n          'missedQuestions',\r\n          '[\"' + currentQuestion.questionID.toString() + '\"]'\r\n        );\r\n      }\r\n    }\r\n\r\n    /* Append the user's results to the \"scoreList\": \"0\" if incorrect and \"1\" \r\n           if correct */\r\n    if (classToApply === 'correct') {\r\n      scoreList.push(1);\r\n    } else {\r\n      scoreList.push(0);\r\n    }\r\n\r\n    // Store the \"scoreList\" in local storage object after the test is complete\r\n    if (questionCounter === MAX_QUESTIONS) {\r\n      if (localStorage.getItem('testScores') !== null) {\r\n        /* Append the data from the most recent test into the \"testScores\" object\r\n                in local storage */\r\n        //   STEP 1: Deserialize the existing testScores object from local storage\r\n        let testScoresDeserialized = JSON.parse(\r\n          localStorage.getItem('testScores')\r\n        );\r\n\r\n        //   STEP 2: Determine the current test number\r\n        testScoresKeys = Object.keys(testScoresDeserialized);\r\n\r\n        lastKey = testScoresKeys.pop();\r\n\r\n        lastTestNumber = lastKey.replace('Test ', '');\r\n\r\n        currentTestNumber = parseInt(lastTestNumber) + 1;\r\n\r\n        //   STEP 3: Append the recent test score data to the deserialized object\r\n        testScoresDeserialized['Test ' + currentTestNumber.toString()] =\r\n          scoreList;\r\n\r\n        //   STEP 4: Re-serialize the object and put it back into local storage\r\n        let testScoresSerialized = JSON.stringify(testScoresDeserialized);\r\n        localStorage.setItem('testScores', testScoresSerialized);\r\n      } else {\r\n        // Add a key value pair to the \"testScores\" object (e.g. {test 1: [0, 1, 0]})\r\n        testScores['Test 1'] = scoreList;\r\n\r\n        // Add testScores to local storage\r\n        let testScoresSerialized = JSON.stringify(testScores);\r\n        localStorage.setItem('testScores', testScoresSerialized);\r\n      }\r\n    }\r\n    // Do not allow the user to select answers if they have already answered\r\n    acceptingAnswers = false;\r\n  });\r\n});\r\n\r\nfunction showAnswer() {\r\n  // Disable the \"SHOW ANSWER\" button if the user has not selected an answer.\r\n  if (acceptingAnswers) {\r\n    return;\r\n  }\r\n\r\n  // Add green highlighting to the correct answer.\r\n  correctChoice = document.getElementById(\r\n    'choice' + String(currentQuestion.answer)\r\n  );\r\n  correctChoice.classList.add('correct', 'button-revealed');\r\n\r\n  // // Make the answer explanation visable.\r\n\r\n  // Insert the HTML element\r\n  explanationElement = document.getElementById('explanation');\r\n  explanationElement.innerText = localStorage.getItem('questionExplanation');\r\n  document.getElementById('explanation').style.visibility = 'visible';\r\n}\r\n\r\nshowAnswerButton.onclick = showAnswer;\r\n\r\nconst modal = document.getElementById('modal');\r\nconst backDrop = document.getElementById('backdrop');\r\nconst revealModalButton = document.getElementById('show-answer');\r\n\r\nconst toggleModal = () => {\r\n  if (acceptingAnswers) {\r\n    modal.classList.toggle('visible');\r\n    backDrop.classList.toggle('visible');\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\nrevealModalButton.addEventListener('click', toggleModal);\r\nbackDrop.addEventListener('click', toggleModal);\r\n"]}