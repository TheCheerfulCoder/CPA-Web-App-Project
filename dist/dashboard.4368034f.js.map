{"version":3,"sources":["dashboard/dashboard.js"],"names":["window","history","pushState","addEventListener","event","location","href","ctx","document","getElementById","viewMissedQuestion","questionID","localStorage","setItem","testDataDeserialized","JSON","parse","getItem","testDataKeys","Object","keys","recentTests","slice","recentTestScores","i","length","singleTestData","numberCorrect","filter","data","testScore","Math","round","unshift","myChart","Chart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","display","maintainAspectRatio","scales","y","beginAtZero","max","afterDataLimits","axis","fetch","then","resp","json","loadedQuestions","displayMissedQuestions","catch","err","console","error","missedQuestions","missedQuestionsObject","num","missedQuestionsArray","entries","sort","a","b","list","querySelector","missedQuestion","timesMissed","questionLength","Number","question","questionPreview","substring","trim","innerHTML","selectedQuestionID","target","closest","id"],"mappings":"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","file":"dashboard.4368034f.js","sourceRoot":"..\\src\\app","sourcesContent":["window.history.pushState({}, '', '');\r\n\r\nwindow.addEventListener('popstate', (event) => {\r\n  window.location.href = '../index.html';\r\n});\r\n\r\nconst ctx = document.getElementById('myChart');\r\n\r\nconst viewMissedQuestion = (questionID) => {\r\n  localStorage.setItem('studyQuestionID', questionID);\r\n  window.location.href = 'viewMissedQuestion.html';\r\n};\r\n\r\n// Get key names of the most recent six tests.\r\nlet testDataDeserialized = JSON.parse(localStorage.getItem('testScores'));\r\nlet testDataKeys = Object.keys(testDataDeserialized);\r\nlet recentTests = testDataKeys.slice(-10);\r\n\r\n// Get the test scores for the most recent six tests.\r\nvar recentTestScores = [];\r\nfor (var i = Object.keys(testDataDeserialized).length - 1; i >= 0; i--) {\r\n  const singleTestData = testDataDeserialized[testDataKeys[i]];\r\n\r\n  const numberCorrect = singleTestData.filter((data) => data !== 0);\r\n  let testScore = Math.round(\r\n    100 * (numberCorrect.length / singleTestData.length)\r\n  );\r\n\r\n  recentTestScores.unshift(testScore);\r\n}\r\n\r\nconst myChart = new Chart(ctx, {\r\n  type: 'line',\r\n  data: {\r\n    labels: recentTests,\r\n    datasets: [\r\n      {\r\n        label: '%',\r\n        data: recentTestScores.slice(-10),\r\n        backgroundColor: ['rgb(00, 00, 00)'],\r\n        borderColor: ['#10ff10'],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: (100)[\r\n          {\r\n            afterDataLimits: function (axis) {\r\n              axis.max += 1;\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\n// window.addEventListener('resize', () => { location.reload() });\r\n\r\n// Fetch the data from /assets/questions.json\r\nfetch('../questions.json')\r\n  .then(function (resp) {\r\n    return resp.json();\r\n  })\r\n\r\n  .then(function (data) {\r\n    loadedQuestions = data;\r\n    displayMissedQuestions();\r\n  })\r\n\r\n  .catch((err) => {\r\n    console.error(err);\r\n  });\r\n\r\ndisplayMissedQuestions = () => {\r\n  /* Create a table of buttons that show a preivew of the every missed \r\n    question (i.e, How many times does it...) and the number of times that \r\n    question was missed. When the user clicks on each button, it should take \r\n    them to the viewMissedQuestion.js page to study the missed question. */\r\n\r\n  // Get the array of missed questions from local storage\r\n  let missedQuestions = JSON.parse(localStorage.getItem('missedQuestions'));\r\n\r\n  // Create an object that contains all the missed questions and their\r\n  // frequency. Example: {00001: 3, 00003: 5, 00002: 6}\r\n  const missedQuestionsObject = {};\r\n  for (const num of missedQuestions) {\r\n    missedQuestionsObject[num] = missedQuestionsObject[num]\r\n      ? missedQuestionsObject[num] + 1\r\n      : 1;\r\n  }\r\n\r\n  // Turn the \"missedQuestionsObject\" into a multidemensional array.\r\n  // Example: [['00002', 6], ['00003', 5], ['00001', 3]].\r\n  const missedQuestionsArray = Object.entries(missedQuestionsObject);\r\n\r\n  // Sort the multidemensional array in descending order based on frequency.\r\n  missedQuestionsArray.sort(function (a, b) {\r\n    return b[1] - a[1];\r\n  });\r\n\r\n  // Render all the buttons on the screen.\r\n  list = document.querySelector('.list');\r\n  for (missedQuestion of missedQuestionsArray) {\r\n    questionID = missedQuestion[0];\r\n    timesMissed = missedQuestion[1];\r\n    questionLength = loadedQuestions[Number(questionID)].question.length;\r\n\r\n    if (questionLength > 40) {\r\n      questionPreview =\r\n        loadedQuestions[Number(questionID)].question.substring(0, 40).trim() +\r\n        '...';\r\n    } else {\r\n      questionPreview = loadedQuestions[Number(questionID)].question;\r\n    }\r\n\r\n    list.innerHTML += `\r\n            <div class=\"button parent\" id=\"${questionID}\">\r\n                <div class=\"child left-child\">${questionPreview}</div> \r\n                <div class=\"child\">${timesMissed}</div> \r\n            </div>\r\n        `;\r\n  }\r\n\r\n  // Make each button send the user to the testing page when clicked.\r\n  list.addEventListener('click', (event) => {\r\n    selectedQuestionID = event.target.closest('.button').id;\r\n    viewMissedQuestion(selectedQuestionID);\r\n  });\r\n};\r\n"]}