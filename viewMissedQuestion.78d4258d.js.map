{"version":3,"sources":["dashboard/viewMissedQuestion.js"],"names":["window","history","pushState","addEventListener","event","location","href","question","document","getElementById","choices","Array","from","getElementsByClassName","progressText","showAnswerButton","nextQuestionButton","availableQuestions","acceptingAnswers","MAX_QUESTIONS","testScores","showAnswer","correctChoice","String","currentQuestion","answer","classList","add","explanationElement","innerText","localStorage","getItem","style","visibility","fetch","then","res","json","loadedQuestions","questions","startTest","catch","err","console","error","questionCounter","scoreList","getNewQuestion","doNothing","forEach","answerStylingIncorrect","remove","answerStylingCorrect","answerStylingRevealed","answerStylingSelected","studyQuestionID","questionIndex","parseInt","innerHTML","choice","number","dataset","setItem","explanation","splice","onclick","parentElement","e","buttonText","log","dir","target","tagName","selectedChoice","classToApply","missedQuestionsDeserialized","JSON","parse","push","questionID","stringify","toString","testScoresDeserialized","testScoresKeys","Object","keys","lastKey","pop","lastTestNumber","replace","currentTestNumber","testScoresSerialized","viewMyPerformance","modal","backDrop","revealModalButton","toggleModal","toggle"],"mappings":"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","file":"viewMissedQuestion.78d4258d.js","sourceRoot":"..\\src\\app","sourcesContent":["window.history.pushState({}, '', '');\r\n\r\nwindow.addEventListener('popstate', (event) => {\r\n  window.location.href = 'dashboard.html';\r\n});\r\n\r\nconst question = document.getElementById('question');\r\nconst choices = Array.from(document.getElementsByClassName('choice-text'));\r\nconst progressText = document.getElementById('progressText');\r\n\r\nconst showAnswerButton = document.getElementById('show-answer');\r\nconst nextQuestionButton = document.getElementById('next-question');\r\n\r\nlet availableQuestions = [];\r\nlet acceptingAnswers = true;\r\n\r\nconst MAX_QUESTIONS = 1;\r\n\r\n// Initialize or fetch the \"testScores\" object that holds all test score data\r\nlet testScores = {};\r\n\r\n// Fetch the questions from the \"/assets/questions.json\" file and store them in \"questions\"\r\nfetch('../questions.json')\r\n  .then((res) => {\r\n    return res.json();\r\n  })\r\n\r\n  .then((loadedQuestions) => {\r\n    questions = loadedQuestions;\r\n    startTest();\r\n  })\r\n\r\n  .catch((err) => {\r\n    console.error(err);\r\n  });\r\nstartTest = () => {\r\n  questionCounter = 0;\r\n  availableQuestions = [...questions];\r\n  scoreList = [];\r\n  getNewQuestion();\r\n};\r\n\r\ndoNothing = () => {\r\n  return;\r\n};\r\n\r\ngetNewQuestion = () => {\r\n  // Remove any green/red styling from the previous question's answer\r\n  const answerStylingIncorrect = [\r\n    ...document.getElementsByClassName('incorrect'),\r\n  ];\r\n\r\n  answerStylingIncorrect.forEach((answerStylingIncorrect) => {\r\n    answerStylingIncorrect.classList.remove('incorrect');\r\n  });\r\n\r\n  const answerStylingCorrect = [...document.getElementsByClassName('correct')];\r\n\r\n  answerStylingCorrect.forEach((answerStylingCorrect) => {\r\n    answerStylingCorrect.classList.remove('correct');\r\n  });\r\n\r\n  const answerStylingRevealed = [\r\n    ...document.getElementsByClassName('button-revealed'),\r\n  ];\r\n\r\n  answerStylingRevealed.forEach((answerStylingRevealed) => {\r\n    answerStylingRevealed.classList.remove('button-revealed');\r\n  });\r\n\r\n  const answerStylingSelected = [\r\n    ...document.getElementsByClassName('button-selected'),\r\n  ];\r\n\r\n  answerStylingSelected.forEach((answerStylingSelected) => {\r\n    answerStylingSelected.classList.remove('button-selected');\r\n  });\r\n\r\n  // Hide any explanation stylings from the previous question.\r\n  explanationElement = document.getElementById('explanation');\r\n  explanationElement.innerText = '';\r\n\r\n  // // Update the question counter (e.g. 1/3 --> 2/3)\r\n  // questionCounter++;\r\n  // progressText.innerHTML = `Question:\\u00A0 ${questionCounter}/${MAX_QUESTIONS}`\r\n\r\n  // Fill in the question\r\n  const studyQuestionID = localStorage.getItem('studyQuestionID');\r\n  const questionIndex = parseInt(studyQuestionID, 10);\r\n  currentQuestion = availableQuestions[questionIndex];\r\n  question.innerText = currentQuestion.question;\r\n\r\n  // Disable the next question button.\r\n  // nextQuestionButton.onclick = doNothing;\r\n  // nextQuestionButton.classList.toggle('button');\r\n  // nextQuestionButton.classList.toggle('button-disabled');\r\n\r\n  /* When on the last question, change the \"NEXT QUESTION\" button to a \r\n       \"VIEW PERFORMANCE\" performance button. */\r\n  if (questionCounter === MAX_QUESTIONS) {\r\n    // Change the button's text\r\n    var element = document.getElementById('next-question-text');\r\n    element.innerHTML = 'View Score';\r\n  }\r\n\r\n  // Fill in the answer options\r\n  choices.forEach((choice) => {\r\n    const number = choice.dataset['number'];\r\n    choice.innerText = currentQuestion['choice' + number];\r\n  });\r\n\r\n  // // Fill in the explanation\r\n  // explanation.innerText = currentQuestion.explanation;\r\n\r\n  // Send question explanation to local storage for later access in the \"ShowAnswer\"\r\n  // function.\r\n  localStorage.setItem('questionExplanation', currentQuestion.explanation);\r\n\r\n  // Remove the question from the list of available questions\r\n  availableQuestions.splice(questionIndex, 1);\r\n\r\n  // Allow the user to select answers\r\n  acceptingAnswers = true;\r\n\r\n  const viewMyPerformance = document.getElementById('next-question');\r\n  viewMyPerformance.onclick = function RedirectToPerformance() {\r\n    window.location.href = 'dashboard.html';\r\n  };\r\n};\r\n\r\nchoices.forEach((choice) => {\r\n  choice.parentElement.addEventListener('click', (e) => {\r\n    // Prevent the user from selecting more than one answer\r\n    if (!acceptingAnswers) return;\r\n    acceptingAnswers = false;\r\n\r\n    // Enable the next question button unless we are on the last question.\r\n    buttonText = document.getElementById('next-question-text').innerHTML;\r\n\r\n    console.log(buttonText);\r\n\r\n    if (buttonText === 'Back To Performance') {\r\n      // nextQuestionButton.classList.toggle('button');\r\n      // nextQuestionButton.classList.toggle('button-disabled');\r\n      const viewMyPerformance = document.getElementById('next-question');\r\n      viewMyPerformance.onclick = function RedirectToPerformance() {\r\n        window.location.href = 'dashboard.html';\r\n      };\r\n    } else {\r\n      // nextQuestionButton.onclick = getNewQuestion;\r\n      // nextQuestionButton.classList.toggle('button');\r\n      // nextQuestionButton.classList.toggle('button-disabled');\r\n      const viewMyPerformance = document.getElementById('next-question');\r\n      viewMyPerformance.onclick = function RedirectToPerformance() {\r\n        window.location.href = 'dashboard/dashboard.html';\r\n      };\r\n    }\r\n\r\n    console.dir(e.target.tagName);\r\n\r\n    // Get the data for the selected answer\r\n    const selectedChoice = e.target;\r\n    const selectedAnswer = selectedChoice.dataset['number'];\r\n\r\n    /* By default, make the user's selection incorrect; however, if the user\r\n           selected the correct answer, make the user's selection correct. */\r\n    let classToApply = 'incorrect';\r\n    if (selectedAnswer == currentQuestion.answer) {\r\n      classToApply = 'correct';\r\n    }\r\n\r\n    // Change the class element in the HTML for the parent element\r\n    if (e.target.tagName == 'P') {\r\n      selectedChoice.parentElement.classList.add(\r\n        classToApply,\r\n        'button-selected'\r\n      );\r\n    } else {\r\n      selectedChoice.classList.add(classToApply, 'button-selected');\r\n    }\r\n\r\n    // Store whether the user got the question right or wrong in local storage\r\n    if (classToApply === 'incorrect') {\r\n      if (localStorage.getItem('missedQuestions') !== null) {\r\n        let missedQuestionsDeserialized = JSON.parse(\r\n          localStorage.getItem('missedQuestions')\r\n        );\r\n        missedQuestionsDeserialized.push(currentQuestion.questionID);\r\n        localStorage.setItem(\r\n          'missedQuestions',\r\n          JSON.stringify(missedQuestionsDeserialized)\r\n        );\r\n      } else {\r\n        localStorage.setItem(\r\n          'missedQuestions',\r\n          '[\"' + currentQuestion.questionID.toString() + '\"]'\r\n        );\r\n      }\r\n    }\r\n\r\n    /* Append the user's results to the \"scoreList\": \"0\" if incorrect and \"1\" \r\n           if correct */\r\n    if (classToApply === 'correct') {\r\n      scoreList.push(1);\r\n    } else {\r\n      scoreList.push(0);\r\n    }\r\n\r\n    // Store the \"scoreList\" in local storage object after the test is complete\r\n    if (questionCounter === MAX_QUESTIONS) {\r\n      if (localStorage.getItem('testScores') !== null) {\r\n        /* Append the data from the most recent test into the \"testScores\" object\r\n                in local storage */\r\n        //   STEP 1: Deserialize the existing testScores object from local storage\r\n        let testScoresDeserialized = JSON.parse(\r\n          localStorage.getItem('testScores')\r\n        );\r\n\r\n        //   STEP 2: Determine the current test number\r\n        testScoresKeys = Object.keys(testScoresDeserialized);\r\n\r\n        lastKey = testScoresKeys.pop();\r\n\r\n        lastTestNumber = lastKey.replace('Test ', '');\r\n\r\n        currentTestNumber = parseInt(lastTestNumber) + 1;\r\n\r\n        //   STEP 3: Append the recent test score data to the deserialized object\r\n        testScoresDeserialized['Test ' + currentTestNumber.toString()] =\r\n          scoreList;\r\n\r\n        //   STEP 4: Re-serialize the object and put it back into local storage\r\n        let testScoresSerialized = JSON.stringify(testScoresDeserialized);\r\n        localStorage.setItem('testScores', testScoresSerialized);\r\n      } else {\r\n        // Add a key value pair to the \"testScores\" object (e.g. {test 1: [0, 1, 0]})\r\n        testScores['Test 1'] = scoreList;\r\n\r\n        // Add testScores to local storage\r\n        let testScoresSerialized = JSON.stringify(testScores);\r\n        localStorage.setItem('testScores', testScoresSerialized);\r\n      }\r\n    }\r\n    // Do not allow the user to select answers if they have already answered\r\n    acceptingAnswers = false;\r\n  });\r\n});\r\n\r\nfunction showAnswer() {\r\n  // Disable the \"SHOW ANSWER\" button if the user has not selected an answer.\r\n  if (acceptingAnswers) {\r\n    return;\r\n  }\r\n\r\n  // Add green highlighting to the correct answer.\r\n  correctChoice = document.getElementById(\r\n    'choice' + String(currentQuestion.answer)\r\n  );\r\n  correctChoice.classList.add('correct', 'button-revealed');\r\n\r\n  // // Make the answer explanation visable.\r\n\r\n  // Insert the HTML element\r\n  explanationElement = document.getElementById('explanation');\r\n  explanationElement.innerText = localStorage.getItem('questionExplanation');\r\n  document.getElementById('explanation').style.visibility = 'visible';\r\n}\r\n\r\nconst viewMyPerformance = document.getElementById('next-question');\r\nviewMyPerformance.onclick = function RedirectToPerformance() {\r\n  window.location.href = 'dashboard/dashboard.html';\r\n};\r\n\r\nshowAnswerButton.onclick = showAnswer;\r\n\r\nconst modal = document.getElementById('modal');\r\nconst backDrop = document.getElementById('backdrop');\r\nconst revealModalButton = document.getElementById('show-answer');\r\n\r\nconst toggleModal = () => {\r\n  if (acceptingAnswers) {\r\n    modal.classList.toggle('visible');\r\n    backDrop.classList.toggle('visible');\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\nrevealModalButton.addEventListener('click', toggleModal);\r\nbackDrop.addEventListener('click', toggleModal);\r\n"]}